#version 430 core

// This shader is to convert from fourier domain into world space domain
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// --------------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform readonly  image2D fourierDomainInput;
layout(rgba32f, binding = 1) uniform writeonly image2D worldPositionOutput;

// --------------------------------------------------------------------------------

struct ComplexNumber
{
	float real;
	float complex;
};

ComplexNumber MultiplyComplex(ComplexNumber num1, float multiplier)
{
	return ComplexNumber(num1.real * multiplier, num1.complex * multiplier);
}

// --------------------------------------------------------------------------------

void main()
{
	vec4  finalValue = vec4(0.0, 0.0, 0.0, 1.0);
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 resolution = imageSize(fourierDomainInput);

	for(int z = 0; z < resolution.y; z++)
	{
		for(int x = 0; x < resolution.x; x++)
		{
			

			// Store the calculated value into the texture
			imageStore(worldPositionOutput, ivec2(x, z), finalValue);
		}
	}
}

// --------------------------------------------------------------------------------