#version 430 core

// This shader is to convert from fourier domain into world space domain
// As glsl does not support recursion this shader is very freehand on the implementation of a DFT

// How this works is each run of the shader progresses a step through the butterfly diagram of an FFT
// the uniforms of jump size determines how far through the diagram we are
// the amount of times to run this shader is log2(resoultion).

// For an explanation as to how FFTs work see here: https://www.cs.cmu.edu/afs/andrew/scs/cs/15-463/99/pub/www/notes/fourier/fourier.pdf

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// --------------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform readonly  image2D fourierDomainInput;    // Initial input of complex data
layout(rgba32f, binding = 1) uniform           image2D worldPositionOutput;   // Output data 1 (ping pong texture 1)
layout(rgba32f, binding = 2) uniform           image2D worldPositionOutput2;  // Output data 2 (ping pong texture 1)
layout(rgba32f, binding = 3) uniform readonly  image2D butterflyTexture;      // Butterfly texture

// If we are on the horizontal or vertical part of the processing
uniform bool horizontal;

// The pass index we are currently on
uniform int passCount;

// bool to say where the data is to be read from and output to
uniform bool storeDataInOutput1;

// --------------------------------------------------------------------------------

// Useful functionality
struct ComplexNumber
{
	float real;
	float complex;
};

ComplexNumber DivideComplex(ComplexNumber num1, float factor)
{
	return ComplexNumber(num1.real / factor, num1.complex / factor);
}

ComplexNumber MultiplyComplex(ComplexNumber num1, float factor)
{
	return ComplexNumber(num1.real * factor, num1.complex * factor);
}

ComplexNumber MultiplyComplex(ComplexNumber num1, ComplexNumber num2)
{
	return ComplexNumber((num1.real * num2.real)    - (num1.complex * num2.complex), 
	                     (num1.real * num2.complex) + (num1.complex * num2.real));
}

ComplexNumber AddComplexNumber(ComplexNumber num1, ComplexNumber num2)
{
	return ComplexNumber(num1.real + num2.real, num1.complex + num2.complex);
}

ComplexNumber ComplexCast(vec2 inputs)
{
	return ComplexNumber(inputs.x, inputs.y);
}

const float PI = 3.141529;

// --------------------------------------------------------------------------------

// the horizontal FFT reads in data from rows and performs the butterfly calculations on them
// Then outputs the row's info into the output buffer
void HorizontalFFT()
{
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

	// Read in the butterfly texture data
	// r,g is the twiddle factors
	// b and a are the indexes to use in the calculations
	vec4 inputDataSet = imageLoad(butterflyTexture, ivec2(passCount, texelCoord.x)); 

	// Grab the complex values to be used in the twiddle equations
	vec2          firstValue;
	vec2          secondValue;
	ComplexNumber twiddleFactor = ComplexCast(inputDataSet.xy);
	ComplexNumber result;

	// When the pass count is 1 then we are loading data from the initial data buffer
	if(passCount == 0)
	{
		// The Y is the same here for both as we are varying the X to grab rows instead of columns
		firstValue  = imageLoad(fourierDomainInput, ivec2(inputDataSet.z, texelCoord.y)).xy;
		secondValue = imageLoad(fourierDomainInput, ivec2(inputDataSet.w, texelCoord.y)).xy;

		// Now perform the calculation
		result = AddComplexNumber(ComplexCast(firstValue), MultiplyComplex(ComplexCast(secondValue), twiddleFactor));

		// And store the result
		imageStore(worldPositionOutput, texelCoord, vec4(result.real, result.complex, 0.0, 0.0));
	}
	else 
	{
		// Not the first pass so we can just work with the two back and forth textures
		if(storeDataInOutput1)
		{
			// Read in the data from buffer 2 as we are storing in buffer 1
			firstValue  = imageLoad(worldPositionOutput2, ivec2(inputDataSet.z, texelCoord.y)).xy;
			secondValue = imageLoad(worldPositionOutput2, ivec2(inputDataSet.w, texelCoord.y)).xy;

			result = AddComplexNumber(ComplexCast(firstValue), MultiplyComplex(ComplexCast(secondValue), twiddleFactor));

			imageStore(worldPositionOutput, texelCoord, vec4(result.real, result.complex, 0.0, 0.0));
		}
		else
		{
			// Read in the data from buffer 1 as we are storing in buffer 2
			firstValue  = imageLoad(worldPositionOutput, ivec2(inputDataSet.z, texelCoord.y)).xy;
			secondValue = imageLoad(worldPositionOutput, ivec2(inputDataSet.w, texelCoord.y)).xy;

			result = AddComplexNumber(ComplexCast(firstValue), MultiplyComplex(ComplexCast(secondValue), twiddleFactor));

			imageStore(worldPositionOutput2, texelCoord, vec4(result.real, result.complex, 0.0, 0.0));
		}
	}
}

// --------------------------------------------------------------------------------

// The vertical FFT performs a 1D fft on each column of the input texture
void VerticalFFT()
{	
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

	// Read in the butterfly texture data
	// r,g is the twiddle factors
	// b and a are the indexes to use in the calculations
	vec4 inputDataSet = imageLoad(butterflyTexture, ivec2(passCount, texelCoord.y)); 

	// Grab the complex values to be used in the twiddle equations
	vec2          firstValue;
	vec2          secondValue;
	ComplexNumber twiddleFactor = ComplexCast(inputDataSet.xy);
	ComplexNumber result;

	if(storeDataInOutput1)
	{
		// Read in the data from buffer 2 as we are storing in buffer 1
		firstValue  = imageLoad(worldPositionOutput2, ivec2(texelCoord.x, inputDataSet.z)).xy;
		secondValue = imageLoad(worldPositionOutput2, ivec2(texelCoord.x, inputDataSet.w)).xy;

		result = AddComplexNumber(ComplexCast(firstValue), MultiplyComplex(ComplexCast(secondValue), twiddleFactor));

		imageStore(worldPositionOutput, texelCoord, vec4(result.real, result.complex, 0.0, 0.0));
	}
	else
	{
		// Read in the data from buffer 1 as we are storing in buffer 2
		firstValue  = imageLoad(worldPositionOutput, ivec2(texelCoord.x, inputDataSet.z)).xy;
		secondValue = imageLoad(worldPositionOutput, ivec2(texelCoord.x, inputDataSet.w)).xy;

		result = AddComplexNumber(ComplexCast(firstValue), MultiplyComplex(ComplexCast(secondValue), twiddleFactor));

		imageStore(worldPositionOutput2, texelCoord, vec4(result.real, result.complex, 0.0, 0.0));
	}
}

// --------------------------------------------------------------------------------

void main()
{
	if(horizontal)
	{
		HorizontalFFT();
	}
	else
	{
		VerticalFFT();
	}	
}

// --------------------------------------------------------------------------------