#version 430 core

// Size of 1 on the X as it is much smaller than the Y scale
// The texture resolution is (log2(n), n)
layout(local_size_x = 1, local_size_y = 16, local_size_z = 1) in;

// --------------------------------------------------------------------------------

// Final value output buffer
// Red and green hold the twiddle factors for the fft calculations
// blue and alpha hold the index for the input data
layout(rgba32f, binding = 0) uniform writeonly image2D outputTexture;

// --------------------------------------------------------------------------------

const float PI = 3.141529;

uniform int N;

layout(std430, binding = 1) buffer bitReversedIndicies
{
	int indexData[];
};

// --------------------------------------------------------------------------------

struct ComplexNumber
{
	float real;
	float complex;
};

// --------------------------------------------------------------------------------

void main()
{
	// The pixel we are processing
	vec2  texelCoord  =  vec2(gl_GlobalInvocationID.xy);
	ivec2 texelCoordI = ivec2(texelCoord);

	// Calculate the twiddle power
	float k = mod(texelCoord.y * (float(N) / pow(2.0, texelCoord.x + 1.0)), N);

	// Calculate the twiddle factor using the power calculated above
	ComplexNumber twiddle = ComplexNumber(cos((2.0 * PI * k) / float(N)), 
	                                      sin((2.0 * PI * k) / float(N)));

	// The jump distance of the butterfly equation
	int butterflyWingspan = int(pow(2, texelCoord.x));

	// Determine if we are in the top or bottom section of a butterfly wing
	// if our current Y coordinate, wrapped to the right repeating amount, is in the bottom or top half of the wrap
	bool topHalf = false;
	if(mod(texelCoord.y, pow(2, texelCoord.x + 1)) < pow(2, texelCoord.x))
		topHalf = true;

	// If we are in the first step of the generation then we need to bitreverse the indicies
	if(texelCoord.x == 0)
	{
		if(topHalf)
		{
			imageStore(outputTexture, texelCoordI, vec4(twiddle.real, twiddle.complex, indexData[int(texelCoord.y)], indexData[int(texelCoord.y + 1)]));
		}
		else
		{
			imageStore(outputTexture, texelCoordI, vec4(twiddle.real, twiddle.complex, indexData[int(texelCoord.y - 1)], indexData[int(texelCoord.y)]));
		}
	}
	else
	{
		if(topHalf)
		{	
			imageStore(outputTexture, texelCoordI, vec4(twiddle.real, twiddle.complex, texelCoord.y, texelCoord.y + butterflyWingspan));
		}
		else
		{
			imageStore(outputTexture, texelCoordI, vec4(twiddle.real, twiddle.complex, texelCoord.y - butterflyWingspan, texelCoord.y));
		}
	}
}

// --------------------------------------------------------------------------------