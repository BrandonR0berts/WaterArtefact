#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform writeonly image2D positionOutput;
layout(rgba32f, binding = 1) uniform writeonly image2D normalOutput;
layout(rgba32f, binding = 2) uniform writeonly image2D tangentOutput;
layout(rgba32f, binding = 3) uniform writeonly image2D binormalOutput;

uniform float time;
uniform int waveCount;

// -------------------------------------------------------------------------------------

struct GerstnerWaveData
{
	float amplitude;
	float steepnessFactor;
	float speedOfWave;
	float waveLength;
	float directionOfWaveX;
	float directionOfWaveZ;
	float padding1;
	float padding2;
};

layout (std430, binding = 5) buffer WaveData
{
	GerstnerWaveData waves[];
};

// -------------------------------------------------------------------------------------

vec3 CalculatePosition(vec2 texelCoord, vec2 direction, float frequency, float phaseConstant, float amplitude, float steepnessFactor)
{	
	return vec3((steepnessFactor * amplitude * direction.x) * cos(dot((frequency * direction), texelCoord) + (phaseConstant * time)),
	            amplitude * sin(dot((frequency * direction), texelCoord) + (phaseConstant * time)),
				(steepnessFactor * amplitude * direction.y) * cos(dot((frequency * direction), texelCoord) + (phaseConstant * time)));
}

// -------------------------------------------------------------------------------------

vec3 CalculateBinormal(vec2 direction, float WA, float S, float C, float steepnessFactor)
{
	return vec3(steepnessFactor * direction.x * direction.x * WA * S,
			    steepnessFactor * direction.x * direction.y * WA * S,
				direction.x * WA * C);
}

// -------------------------------------------------------------------------------------

vec3 CalculateTangent(vec2 direction, float WA, float S, float C, float steepnessFactor)
{
	return vec3(steepnessFactor * direction.x * direction.y * WA * S,
				steepnessFactor * direction.y * direction.y * WA * S,
				direction.y * WA * C);
}

// -------------------------------------------------------------------------------------

vec3 CalculateNormal(vec2 direction, float WA, float S, float C, float steepnessFactor)
{
	return vec3(direction.x * WA * C,
				direction.y * WA * C,
				steepnessFactor * WA * S);
}

// -------------------------------------------------------------------------------------

// https://developer.nvidia.com/gpugems/gpugems/part-i-natural-effects/chapter-1-effective-water-simulation-physical-models
// This code has the Y and Z positions flipped from the link 

// Maps -1->1 to 0->1
vec3 mapToSaveNegatives(vec3 inValue)
{
	return (inValue * 0.5) + 0.5;
}

// ---------------------------------------------------------- //

void main()
{
	vec4 finalValue = vec4(0.0, 0.0, 0.0, 1.0);

	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	
	// ---------------------------------------------------------- //

	vec3 finalPositionData = vec3(0.0, 0.0, 0.0);
	vec3 finalBinormalData = vec3(0.0, 0.0, 0.0);
	vec3 finalTangentData  = vec3(0.0, 0.0, 0.0);
	vec3 finalNormalData   = vec3(0.0, 0.0, 0.0);

	// ---------------------------------------------------------- //

	for(int i = 0; i < waveCount; i++)
	{
		// ---------------------------------------------------------- //
		// Position

		vec2 direction = vec2(1.0, 0.0);

		if(waves[i].directionOfWaveX > 0.0 || waves[i].directionOfWaveZ > 0.0)
			direction = normalize(vec2(waves[i].directionOfWaveX, waves[i].directionOfWaveZ));

		float frequency     = 2.0 / waves[i].waveLength;
		float phaseConstant = waves[i].speedOfWave * frequency;

		vec3 thisWavePosition = CalculatePosition(texelCoord, direction, frequency, phaseConstant, waves[i].amplitude, waves[i].steepnessFactor);
		finalPositionData += thisWavePosition;

		// ---------------------------------------------------------- //
		float WA             = frequency * waves[i].amplitude;
		float phaseByTime    = phaseConstant * time;
		float internalFactor = (dot(direction, texelCoord) * frequency) + phaseByTime;
		float S              = sin(internalFactor);
		float C              = cos(internalFactor);

		// Binormal
		vec3 thisWaveBinormal = CalculateBinormal(direction, WA, S, C, waves[i].steepnessFactor);
		finalBinormalData += thisWaveBinormal;

		// ---------------------------------------------------------- //
		// Tangent
		vec3 thisWaveTangent = CalculateTangent(direction, WA, S, C, waves[i].steepnessFactor);
		finalTangentData += thisWaveTangent;

		// ---------------------------------------------------------- //
		// Normal
		vec3 thisWaveNormal = CalculateNormal(direction, WA, S, C, waves[i].steepnessFactor);
		finalNormalData += thisWaveNormal;
	}

	// ---------------------------------------------------------- //

	//finalNormalData   = normalize(finalNormalData);
	finalBinormalData = normalize(finalBinormalData);
	finalTangentData  = normalize(finalTangentData);

	// ---------------------------------------------------------- //

	finalValue.x = finalPositionData.x;
	finalValue.y = finalPositionData.y;
	finalValue.z = finalPositionData.z;

    imageStore(positionOutput, texelCoord, finalValue);

	// ---------------------------------------------------------- //

	finalValue.x = 1.0 - finalBinormalData.x;
	finalValue.y = -finalBinormalData.z;
	finalValue.z = finalBinormalData.y;

	finalValue.xyz = mapToSaveNegatives(finalValue.xyz);

    imageStore(binormalOutput, texelCoord, finalValue);

	// ---------------------------------------------------------- //

	finalValue.x = -finalTangentData.x;
	finalValue.y = 1.0 - finalTangentData.z;
	finalValue.z = finalTangentData.y;

	finalValue.xyz = mapToSaveNegatives(finalValue.xyz);

    imageStore(tangentOutput, texelCoord, finalValue);

	// ---------------------------------------------------------- //

	finalNormalData.x = -finalNormalData.x;
	finalNormalData.y = -finalNormalData.y;
	finalNormalData.z = 1.0 - finalNormalData.z;

	finalNormalData.xyz = mapToSaveNegatives(finalValue.xyz);

    imageStore(normalOutput, texelCoord, vec4(finalNormalData, 1.0));

	// ---------------------------------------------------------- //
}

// -------------------------------------------------------------------------------------