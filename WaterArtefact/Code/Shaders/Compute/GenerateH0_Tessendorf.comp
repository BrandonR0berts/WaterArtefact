#version 430 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// --------------------------------------------------------------------------------

// Final value output buffer
layout(rgba32f, binding = 0) uniform writeonly image2D positionOutput;

// Input buffer of random numbers
layout(rgba32f, binding = 1) uniform readonly image2D  randomNumbers;

// --------------------------------------------------------------------------------

uniform vec2  windVelocity;
uniform float gravity;
uniform float phillipsConstant;

uniform vec2 LxLz;

// --------------------------------------------------------------------------------

const float oneOverRootTwo   = 1.0 / sqrt(2.0);
const float PI               = 3.141529;

// --------------------------------------------------------------------------------

struct ComplexNumber
{
	float real;
	float complex;
};

ComplexNumber MultiplyComplex(ComplexNumber num1, float multiplier)
{
	return ComplexNumber(num1.real * multiplier, num1.complex * multiplier);
}

// --------------------------------------------------------------------------------

float PhillipsSpectrum(vec2 k)
{
	float kSquared        = max(dot(k, k), 0.001);
	float kToTheFour      = kSquared * kSquared;

	float windSpeed       = max(sqrt(dot(windVelocity, windVelocity)), 0.01);
	vec2  windDirection   = normalize(windVelocity);

	float L               = (windSpeed * windSpeed) / gravity;

	float exponentialFactor = (exp(-1.0 / (kSquared * L * L))) / kToTheFour;
	float absoluteFactor    = abs(dot(normalize(k), windDirection));
	float convergenceFactor = exp(-kSquared * pow(LxLz.x / 2000.0, 2.0));

	return clamp(phillipsConstant * exponentialFactor * absoluteFactor * absoluteFactor * convergenceFactor, -4000.0, 4000.0);
}

// --------------------------------------------------------------------------------

// Fourier amplitudes of a wave height field
ComplexNumber hZero(vec2 k, vec2 randomNumber)
{
	float multiplier = oneOverRootTwo * sqrt(PhillipsSpectrum(k));

	return MultiplyComplex(ComplexNumber(randomNumber.x, randomNumber.y), multiplier);
}

// --------------------------------------------------------------------------------

// This may need to be divided by real world distance between points not the whole space?
// If at larger LODs the scaling is not right then this is likely the issue
vec2 CreateK(float n, float m, vec2 Lxz)
{
	return vec2((2.0 * PI * n) / Lxz.x,
	            (2.0 * PI * m) / Lxz.y);
}

// --------------------------------------------------------------------------------

void main()
{
	// The pixel we are on the image
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	vec2  resolution = vec2(imageSize(positionOutput));

	// The texel we are on the image (0 -> 1 instead of 0 -> 1024 for example)
	vec2 texelCoord = vec2(pixelCoord) / resolution;

	// Grab the random numbers from the input image - they are only stored in the XY portions of the image
	vec4 randomNumbers = imageLoad(randomNumbers, pixelCoord);
	vec2 inputRandom1  = randomNumbers.xy;
	vec2 inputRandom2  = randomNumbers.zw;

	// Now convert the random number to being in the right range - at the moment they are from 0 -> 1
	// We need to convert them to being in the -1 -> 1 range
	vec2 mappedRandom1 = (inputRandom1 * 2.0) - 1.0;
	vec2 mappedRandom2 = (inputRandom2 * 2.0) - 1.0;

	// Determine the n and m positions in mesh space, 
	// These are the 'x' and 'z' relative positions
	// These need to be calculated to make the centre of the output image essentially 0,0
	float n = (texelCoord.x - 0.5) * resolution.x;
	float m = (texelCoord.y - 0.5) * resolution.y;

	// Now determine the wave vector 'k'
	vec2 k = CreateK(n, m, LxLz);

	// ---------------------------------------------------------- //

	// Generate H0, which will then be passed into the final calculations as a starting point
	ComplexNumber h0          = hZero(k, mappedRandom1);
	ComplexNumber h0_MinusK   = hZero(-k, mappedRandom2);

	// ---------------------------------------------------------- //

	vec4 outputValue = vec4(0.0, 0.0, 0.0, 0.0);

	outputValue.x = h0.real;
	outputValue.y = h0.complex;

	outputValue.z = h0_MinusK.real;
	outputValue.w = h0_MinusK.complex;

    imageStore(positionOutput, pixelCoord, outputValue);

	// ---------------------------------------------------------- //
}

// --------------------------------------------------------------------------------