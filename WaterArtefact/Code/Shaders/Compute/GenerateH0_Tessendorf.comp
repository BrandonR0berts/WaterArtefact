#version 430 core

// The resolution of the image is the N in these equations. N determines the amount of waves that are generated.

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// --------------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform writeonly image2D positionOutput;

// --------------------------------------------------------------------------------

uniform float time;

uniform vec2  windVelocity;
uniform float gravity;

// --------------------------------------------------------------------------------

const float phillipsConstant = 5.0;
const float oneOverRootTwo   = 1.0 / sqrt(2.0);
const float PI               = 3.141529;

const float fractionOfTime          = time - floor(time);

// --------------------------------------------------------------------------------

struct ComplexNumber
{
	float real;
	float complex;
};

ComplexNumber MultiplyComplex(ComplexNumber num1, float multiplier)
{
	return ComplexNumber(num1.real * multiplier, num1.complex * multiplier);
}

// --------------------------------------------------------------------------------

// The noise functions are depricated within this version of glsl, so they just return 0
// So instead this is a custom random number generator
float RandomNumber(vec2 seed)
{
	return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

// --------------------------------------------------------------------------------

float PhillipsSpectrum(vec2 k)
{
	float kSquared      = dot(k, k);
	float kToTheFour    = kSquared * kSquared;

	vec2  windDirection = normalize(windVelocity);
	float windSpeed     = length(windVelocity);

	float L             = (windSpeed * windSpeed) / gravity;

	return phillipsConstant * ((exp(-1.0 / (kSquared * L * L))) / kToTheFour) * abs(dot(k, windDirection));
}

// --------------------------------------------------------------------------------

// Fourier amplitudes of a wave height field
ComplexNumber hZero(vec2 k, vec2 randomNumberSeed)
{
	float multiplier = oneOverRootTwo * sqrt(PhillipsSpectrum(k));

	return MultiplyComplex(ComplexNumber(RandomNumber(randomNumberSeed), RandomNumber(randomNumberSeed + vec2(1.1, 1.15))), multiplier);
}

// --------------------------------------------------------------------------------

vec2 CreateK(float n, float m, float resolution)
{
	return vec2((2.0 * PI * n) / resolution,
	            (2.0 * PI * m) / resolution);
}

// --------------------------------------------------------------------------------

void main()
{
	vec4  finalValue = vec4(0.0, 0.0, 0.0, 1.0);
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	vec2  resolution = imageSize(positionOutput);

	vec2 texelCoord = vec2(pixelCoord) / resolution;

	// Determine the n and m positions in mesh space, 
	// These are the 'x' and 'z' relative positions
	// These need to be calculated to make the centre of the output image essentially 0,0
	float n = (texelCoord.y - 0.5) * resolution.x;
	float m = (texelCoord.x - 0.5) * resolution.y;

	// Now determine the wave vector 'k'
	vec2 k = CreateK(n, m, resolution.x);

	// ---------------------------------------------------------- //

	// Generate H0, which will then be passed into the final calculations as a starting point
	ComplexNumber h0 = hZero(k, texelCoord);

	// ---------------------------------------------------------- //

	finalValue.x = h0.real;
	finalValue.y = h0.complex;

    imageStore(positionOutput, pixelCoord, finalValue);

	// ---------------------------------------------------------- //
}

// --------------------------------------------------------------------------------