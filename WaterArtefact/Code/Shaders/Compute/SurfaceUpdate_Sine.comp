#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D positionOutput;
layout(rgba32f, binding = 1) uniform image2D normalOutput;
layout(rgba32f, binding = 2) uniform image2D tangentOutput;
layout(rgba32f, binding = 3) uniform image2D binormalOutput;

uniform float time;
uniform int waveCount;

struct SineWaveData
{
	float amplitude;
	float steepnessFactor;
	float waveLength;
	float speedOfWave;

	float directionOfWaveX;
	float directionOfWaveZ;
	float padding1;
	float padding2;
};

layout (std430, binding = 5) readonly buffer WaveData
{
	SineWaveData waves[];
};

void main()
{
	vec4 finalValue  = vec4(0.0, 0.0, 0.0, 1.0);
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

	float finalHeight = 0.0;

	for(int i = 0; i < waveCount; i++)
	{
		vec2 direction = normalize(vec2(waves[i].directionOfWaveX, waves[i].directionOfWaveZ));
	
		float frequency     = 2.0 / waves[i].waveLength;
		float phaseConstant = waves[i].speedOfWave * frequency;

		finalHeight += waves[i].amplitude * sin((dot(direction, texelCoord) * frequency) + (time * phaseConstant));
	}

	finalValue.y = finalHeight;

    imageStore(positionOutput, texelCoord, finalValue);
}